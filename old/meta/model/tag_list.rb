#
# 
# 
# stolen from 
#  http://svn.viney.net.nz/things/rails/plugins/acts_as_taggable_on_steroids
#
#    "If you find this plugin useful, please consider a donation to show your
#     support! http://www.paypal.com/cgi-bin/webscr?cmd=_send-money
#     Email address: jonathan.viney@gmail.com"
#
# Copyright (c) 2006 Jonathan Viney
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

class TagList < Array
  cattr_accessor :delimiter
  cattr_accessor :delimiters
  self.delimiter  = ','
  self.delimiters = "[,\\s]+"

  def initialize(*args)
    add(*args)
  end

  # Add tags to the tag_list. Duplicate or blank tags will be ignored.
  #
  #   tag_list.add("Fun", "Happy")
  #
  # Use the <tt>:parse</tt> option to add an unparsed tag string.
  #
  #   tag_list.add("Fun, Happy", :parse => true)
  #
  def add(*names)
    extract_and_apply_options!(names)
    concat(names)
    clean!
    self
  end

  # Remove specific tags from the tag_list.
  #
  #   tag_list.remove("Sad", "Lonely")
  #
  # Like #add, the <tt>:parse</tt> option can be used to remove multiple tags in a string.
  #
  #   tag_list.remove("Sad, Lonely", :parse => true)
  def remove(*names)
    extract_and_apply_options!(names)
    delete_if { |name| names.include?(name) }
    self
  end

  # Transform the tag_list into a tag string suitable for edting in a form.
  # The tags are joined with <tt>TagList.delimiter</tt> and quoted if necessary.
  #
  #   tag_list = TagList.new("Round", "Square,Cube")
  #   tag_list.to_s # 'Round, "Square,Cube"'
  def to_s
    clean!
    map do |name|
      /#{self.delimiters}/.match(name) ? "\"#{name}\"" : name
    end.join(delimiter.ends_with?(" ") ? delimiter : "#{delimiter} ")
  end

 private
  # Lowercase; Remove whitespace, duplicates, and blanks.
  def clean!
    map!(&:downcase)   # added by flip -- database doesn't care, but uniq! does
    reject!(&:blank?)
    map!(&:strip)
    uniq!
  end

  # sieve out the options (if any) from the end of the arg list
  # here the only option is :parse, which means that we're
  # getting a list of strings and not atomic tags.
  #
  def extract_and_apply_options!(args)
    options = args.last.is_a?(Hash) ? args.pop : {}
    options.assert_valid_keys :parse
    if options[:parse]
      args.map! { |a| self.class.from(a) }
    end
    # flat list of all the (possibly many) tags generated by each arg
    args.flatten!
  end

  class << self
    # Returns a new TagList using the given tag string.
    #
    #   tag_list = TagList.from("One , Two,  Three")
    #   tag_list # ["One", "Two", "Three"]
    def from(string)
      returning new do |tag_list|
        string = string.to_s.dup

        # Parse the quoted tags
        string.gsub!(/"(.*?)"\s*#{delimiters}?\s*/) { tag_list << $1; "" } # pull off all groups within double quotes ""
        string.gsub!(/'(.*?)'\s*#{delimiters}?\s*/) { tag_list << $1; "" } # pull off all groups within single quotes ""
        tag_list.add(string.split(/#{delimiters}/))                        # rest can be safely split along delimiter
      end
    end
  end
end
